#This project utilizes the following Superstore data:

CREATE TABLE superstore (
    item_id INTEGER PRIMARY KEY,
    item_name TEXT,
    category TEXT,
    price DECIMAL(10, 2),
    stock_quantity INTEGER,
    average_rating DECIMAL(3, 2)
);

INSERT INTO superstore (item_id, item_name, category, price, stock_quantity, average_rating)
VALUES
    (1, 'Stainless Steel Cookware Set', 'Kitchen Supplies', 89.99, 50, 4.6),
    (2, 'Memory Foam Mattress', 'Furnishings', 499.99, 30, 4.8),
    (3, 'Smart LED TV', 'Electronics', 549.00, 20, 4.5),
    (4, 'Robot Vacuum Cleaner', 'Appliances', 199.50, 40, 4.3),
    (5, 'Wireless Bluetooth Speaker', 'Electronics', 39.99, 60, 4.2),
    (6, 'Non-Stick Baking Set', 'Kitchen Supplies', 29.95, 80, 4.4),
    (7, 'Cotton Bedding Set', 'Furnishings', 89.00, 25, 4.7),
    (8, 'Smart Home Security Camera', 'Electronics', 79.95, 15, 4.1),
    (9, 'Air Purifier', 'Appliances', 129.50, 35, 4.6),
    (10, 'Premium Coffee Maker', 'Kitchen Supplies', 79.99, 50, 4.9),
    (11, 'Ergonomic Office Chair', 'Furnishings', 189.00, 20, 4.5),
    (12, 'Wireless Earbuds', 'Electronics', 49.99, 75, 4.3),
    (13, 'Slow Cooker', 'Appliances', 49.95, 30, 4.7),
    (14, 'Cutlery Set', 'Kitchen Supplies', 34.50, 40, 4.4),
    (15, 'Cozy Throw Blanket', 'Furnishings', 24.99, 100, 4.2);

#For this project, I used SQL to query the Superstore database to get information about items sold at the store and their prices.
#Part 1: Write your own SQL query that uses a statement to order the items by price.
SELECT *
FROM superstore
ORDER BY price;

#Part 2: Write your own SQL query that will show a statistic about the item prices, like a sum, average, minimum, maximum, or count
SELECT SUM(price)
FROM superstore;

SELECT AVG(price)
FROM superstore;

SELECT COUNT(*) 
FROM superstore;

SELECT MIN(price)
FROM superstore;

SELECT MAX(price)
FROM superstore;

#Part 3: Write your own SQL query that will show a statistic about the price for items in the category of "Kitchen Supplies"
SELECT 
    MIN(price) AS min_price,
    MAX(price) AS max_price,
    AVG(price) AS average_price,
    COUNT(*) AS total_items
FROM superstore
WHERE category = 'Kitchen Supplies';

#Part 4: What is the average rating of items in the 'Electronics' category?
SELECT AVG(average_rating) AS average_rating
FROM superstore
WHERE category = 'Electronics';
#How can these results answer business problems or help a business out? Leveraging SQL queries in the Superstore dataset provides several benefits. For example, identifying top-performing categories guides inventory and marketing strategies. Analyzing prices ensures competitiveness and maximizes revenue. Monitoring stock levels against demand optimizes inventory efficiency. Targeted campaigns based on customer preferences drive sales. Finally, comparing metrics against competitors informs strategic decisions for maintaining market competitiveness. In essence, SQL enables the Superstore to extract actionable insights, facilitating informed decision-making across various business aspects.
